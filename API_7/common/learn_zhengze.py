"""
1、什么是正则表达式？
编写一些规范来查找字符串
2、正则表达式的组成：1）原义字符 2）元字符（一般用这个）
搜索百科“正则表达式”、“在线正则表达式测试”了解
常用的：
1).
匹配除“\n”和"\r"之外的任何单个字符。要匹配包括“\n”和"\r"在内的任何字符，请使用像“[\s\S]”的模式。
2）+
匹配前面的子表达式一次或多次(大于等于1次）。例如，“zo+”能匹配“zo”以及“zoo”，但不能匹配“z”。+等价于{1,}。
.+表示很多个字符
3）?
匹配前面的子表达式零次或一次（最多1次）。例如，“do(es)?”可以匹配“do”或“does”。?等价于{0,1}。
4）/d
匹配任意单个数字
5）*
匹配0次或者多次
3、如何在Python中解析

4、使用正则表达式的场景：
参数化
查找特殊字符，如：邮箱、手机号、身份证号等

re 模块的使用
match(p,target)     从字符串开头位置开始匹配
search（）        从字符串的任意位置进行匹配，匹配到一个就返回，后面的不再匹配
findall（）       返回字符串中所有匹配的字符串组成列表
finditer()      返回一个包含了所有匹配对象的迭代器
sub()           查找并替换
"""

import re

target = "{'mobilephone':'#normal_usr#','pwd':'#normal_pwd#'}"
p = 'normal_usr'  # 原义字符查找
p2 = '#(.*?)#'  # 圆括号在正则表达式中代表组的意思,.表示通用匹配，*表示多次匹配,?表示找到一个就存一个，然后原地再开始找下一个

m1 = re.search(p, target)  # 根据正则表达式p在目标字符串target中查找，有匹配的字符串则返回对象
m = re.search(p2, target)  # search只找一个
print(m)
print(m.group())  # 不传参时表示返回表达式和匹配的字符串一起
print(m.group(1))  # 参数1表示只要找到的第一个，只返回匹配的字符串，不返回表达式，也就是当前组的匹配字符

mm = re.findall(p2, target)  # findall()表示找到所有匹配的字符，返回一个列表
print(mm)

target2 = re.sub(p2, '18300070752', target, count=1)  # count=1表示只替换第一个
print(target2)
